// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum RegionType {
    continent
    country
    admin_region
    district
    municipality
    city
}

enum TypeOfAirport {
    domestic
    local
    international
}

enum FlyingRouteType {
    Local
    International
}

enum RegionStatus {
    Published
    Draft
}

model Continents {
    id          Int                                             @id @default(autoincrement())

    Geometry    Unsupported("geography(MultiPolygon, 4326)")
    
    Name        String
    Type        String

    @@index([Geometry], name: "continent_geometry_idx", type: Gist)
}

model Countries {
    id          Int                                             @id @default(autoincrement())

    Geometry    Unsupported("geography(MultiPolygon, 4326)")
    
    Name        String
    Code        String

    @@index([Geometry], name: "country_geometry_idx", type: Gist)
}

model AdminRegions {
    id          Int                                             @id @default(autoincrement())

    Geometry    Unsupported("geography(MultiPolygon, 4326)")
    Center      Unsupported("geography(Point, 4326)")
    
    Code        String
    Country     String
    CountryI2   Int
    Name        String
    TypeLocal   String
    TypeEn      String
    Type        String
    Points      String
    Points2     String
    
    @@index([Geometry], name: "admin_regions_geometry_idx", type: Gist)
    @@index([Center], name: "admin_regions_center_point_idx", type: Gist)
}

model Districts {
    id          Int                                         @id @default(autoincrement())

    Geometry    Unsupported("geography(MultiPolygon, 4326)")
    Center      Unsupported("geography(Point, 4326)")

    Code        String
    Country     String
    CountryID   Int
    ParentADM   String
    Name        String
    TypeLocal   String
    TypeEn      String
    Type        String

    @@index([Geometry], name: "districts_geometry_idx", type: Gist)
    @@index([Center], name: "districts_center_point_idx", type: Gist)
}

model Municipalities{
    id          Int                                         @id @default(autoincrement())

    Geometry    Unsupported("geography(MultiPolygon, 4326)")
    Center      Unsupported("geography(Point, 4326)")

    Code        String
    Country     String
    CountryID   Int
    ParentADM   String
    ParentDIS   String
    Name        String
    TypeLocal   String
    Type        String

    @@index([Geometry], name: "municipalities_geometry_idx", type: Gist)
    @@index([Center], name: "municipalities_center_point_idx", type: Gist)
}

model Cities {
    id          Int                                     @id @default(autoincrement())

    Geometry    Unsupported("geography(Point, 4326)")

    Name        String
    Type        String
    NameAlt     String
    Country     String
    ISO2        String
    ISO3        String
    ParentADM   String
    Capital     String
    Population  BigInt
}

model Regions {
    id                     Int                                     @id @default(autoincrement())
            
    Geometry               Unsupported("geography(MultiPolygon, 4326)")?
    Center                 Unsupported("geography(Point, 4326)")
        
    Type                   RegionType
    Name                   String
    IdOriginal             Int
    Parent                 Regions? @relation("parent", fields: [IdParent], references: [id])
    IdParent               Int?
    Children               Regions[] @relation("parent")
    Status                 RegionStatus                            @default(Published)

    @@index([Geometry], name: "region_geometry_idx", type: Gist)
    @@index([Center], name: "region_center_point_idx", type: Gist)
    @@index([IdParent], name: "id_parent_idx", type: Hash)

    Airports               Airports[] @relation(name: "region")
    DrivingRoutesFrom      DrivingRoutes[] @relation(name: "regionFrom")
    DrivingRoutesTo        DrivingRoutes[] @relation(name: "regionTo")
    CloseAirportsToRegions CloseAirportsToRegions? @relation(name: "closeAirports")
}

model CloseAirportsToRegions {
    region              Regions @relation(name: "closeAirports", fields: [id], references: [id])  
    id                  Int @id 
    closeAirportsCount  Int
}

model Airports {
    id                          Int                                             @id @default(autoincrement())

    Geometry                    Unsupported("geography(MultiPolygon, 4326)")
    Center                      Unsupported("geography(Point, 4326)")

    Name                        String

    Region                      Regions @relation(name: "region", fields: [RegionId], references: [id])  
    RegionId                    Int

    IntroEn                     String
    SeoTitleEn                  String
    SeoDescriptionEn            String

    Type                        TypeOfAirport
    AltName                     String?
    IATA                        String?                                         //@unique
    ICAO                        String?                                         
    Passengers                  String?
    NameDe                      String?
    NameEn                      String
    NameEs                      String?
    NameFr                      String?
    NameIT                      String?
    NameNL                      String?
    Operator                    String?
    City                        String?
    Country                     String?
    ElFeet                      Int 
    ElMeters                    Float
    Website                     String?
    Wiki                        String?
    TimezoneS                   String?
    TimezoneD                   String?
    
    @@index([Geometry], name: "airports_geometry_idx", type: Gist)
    @@index([Center], name: "airports_center_point_idx", type: Gist)

    FlyingRoutesOrigin                FlyingRoutes[] @relation(name: "origin")
    FlyingRoutesDestination           FlyingRoutes[] @relation(name: "destination")
}

model FlyingRoutes {
    id                          Int                                     @id @default(autoincrement())

    RouteIata                   String
    Type                        FlyingRouteType
    LengthMiles                 Int
    LengthKm                    Int	
    FlightDuration              String
    TimeDifference              String
    CO2Emissions                String
    IntroEn                     String?
    DetailsEn                   String?
    MetaDescriptionEn           String?

    OriginAirport               Airports @relation(name: "origin", fields: [OriginAirportId], references: [id])    
    OriginAirportId             Int
    OriginCoordinates           Unsupported("geography(Point, 4326)")
    OriginCityName              String

    DestinationAirport          Airports @relation(name: "destination", fields: [DestinationAirportId], references: [id])  
    DestinationAirportId        Int
    DestinationCoordinates      Unsupported("geography(Point, 4326)")
    DestinationCityName         String

    Airlines                    String[]

    @@index([OriginCoordinates], name: "flying_routes_origin_сoordinate_idx", type: Gist)
    @@index([DestinationCoordinates], name: "flying_routes_destination_сoordinate_idx", type: Gist)
}

model DrivingRoutes {
    id                              Int                                 @id @default(autoincrement())

    TitleEn                         String
    DistanceKm                      Int
    DistanceMiles                   Int
    DrivingTime                     Int?
    FlightDistance                  Int
    FlightDistanceMiles             Int

    RegionFromCoordinates           Unsupported("geography(Point, 4326)")
    RegionFromCoordinatesOriginal   String
    RegionFrom                      Regions @relation(name: "regionFrom", fields: [RegionFromId], references: [id])  
    RegionFromId                    Int

    RegionToCoordinates             Unsupported("geography(Point, 4326)")
    RegionToCoordinatesOriginal     String
    RegionTo                        Regions @relation(name: "regionTo", fields: [RegionToId], references: [id])  
    RegionToId                      Int

    RegionFromCityName              String
    RegionFromCityId                String?
    CountryFromName                 String
    CountryFromId                   String?
    RegionToCityName                String
    RegionToCityId                  String?
    CountryToName                   String
    CountryToId                     String?
    MNI                             Boolean
    SeoDemandEn                     Int?
    MetaTitleEn                     String?
    MetaDescriptionEn               String?
    IntroEn                         String?
    ContentEn                       String?
    FaqQ1En                         String?
    FaqA1En                         String?
    FaqQ2En                         String?
    FaqA2En                         String?

    @@index([RegionFromCoordinates], name: "driving_routes_region_from_сoordinates_idx", type: Gist)
    @@index([RegionToCoordinates], name: "driving_routes_region_to_сoordinates_idx", type: Gist)
}



// Remove if unnecessary
model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
